함수란 어떤 작업을 수행하기 위해 필요한 문(Statement)들의 집합을 정의한 코드블록이다. 함수는 이름과 매개변수를 갖으며 필요한 떄에 호출하여 
코드 블록에 담긴 문들을 일괄적으로 실행할 수 있다.

// 함수의 정의(함수 선어문)
function 함수이름(매개변수){
  return     ;
}

함수는 호출에 의해 실행되는데 한번만 호출될 수 있는 것이 아니라 여러번 호출할 수 있다.

// 
함수이름(매개변수); // 

함수의 일반적 기능은 어떤 작업을 수행하는 문들의 집합을 정의하여 코드의 재사용에 목적이 있다. 이러한 일반적 기능 이외에 객체 생성,객체의 행위 정의(메
소드),정보 은닉,클로저,모듈화 등의 기능을 수행할 수 있다. 

자바스크립트의 함수는 객체(일급 객체)이다. 다른 객체와 구분될 수 있는 특징은 호출할 수 있다는 것이다.함수도 객체이므로 다른 값들처럼 사용할 수 있다.
즉,변수나 객체,배열등에 저장할 수 있고 다른 함수에 전달되는 인수로도 사용할 수 있으며 함수의 반환값이 될 수도 있다.

함수 정의
함수를 정의하는 방식은 3가지가 있다.

- 함수 선언문
- 함수 표현식
- function 생성자 함수 

함수 선언문 
함수 선언문(Function declaration)방식으로 정의한 함수는 function 키워드와 이하의 내용으로 구성된다.

함수명 
함수 선언문의 경우는,함수명은 생략할 수 없다. 함수명은 함수 몸체에서 자신을 재귀적(recursive)호출하거나 자바스크립트 디버거가 해당 함수를 구분할
수 있는 식별자이다.

매개변수 목록 
0개 이상의 목록으로 괄호로 감싸고 콤마로 분리한다. 다른 언어와의 차이점은 매개변수의 타입을 기술하지 않는다는 것이다. 이 떄문에 함수 몸채 내에서 
매개변수의 타입 체크가 필요할 수 있다.

함수 몸체 
함수가 호출되었을 때 실행되는 문들의 집합이다. 중괄호({})로 감싸고 return 문으로 결과값을 반환할 수 있다. 이를 반환 값(return value)라 한다.

// 함수 선언문
function operator(number) {
  return number * number;
}

함수 표현식

자바스크립트의 함수는 일급 객체이므로 아래와 같은 특징이 있다.
1.무명의 리터럴로 표현이 가능하다.
2.변수나 자료 구조(객체,배열)에 저장할 수 있다.
3.함수의 파라미터로 전달할 수 있다.
4.반환값(return value)으로 사용할 수 있다.

함수의 일급객체 특성을 이용하여 함수 리터럴 방식으로 함수를 정의하고 변수에 할당할 수 있는데 이러한 방식을 함수 표현식이라 한다.

//함수 표현식

const square = function(number) {
  return number * number;
};

함수 표현방식으로 정의한 함수는 함수명을 생략할 수 있다. 이러한 함수를 익명함수라 한다. 함수 표현식에서는 
함수명을 생략하는 것이 일반적이다. 

// 기명 함수 표현식
const foo = function multiply(a,b) {
  return a * b;
};

//익명 함수 표현식
const bar = function(a,b) {
  return a * b;
};

console.log(foo(10,5)); // 50;

const foo = function(a,b) {
  return a * b;
}

console.log(foo(10,10));


// 함수 표현식
ex)

const 함수명 = function() {

}

const 함수명 = function 함수명() {

}

//함수 선언문 
function 함수명() {

}

함수 표현식으로 함수를 정의할 때 함수 리터럴 방식을 사용한다. 함수 선언문도 내부적으로 자바스크립트 엔진이 기명 함수 표현식으로 변환하므로 
결국 함수 리터럴 방식을 사용한다.
따라서 함수선언문과 함수 표현식은 모두 함수 리터럴 방식으로 함수를 정의하는데 이것은 결국 내장 함수 Function 생성자 함수를 생성하는 것을 단순화시킨
short-hand(축약법)이다.

// Function 생성자 함수로 함수를 생성하는 문법은 

new Function(arg1,arg2, ... argN, functionBody)r

var square = new Function('number','return number * number');

console.log(square(10)); //100 

함수와 다른 객체를 구분짓는 특징은 호출할 수 있다는 것 

매개변수(Parameter,인자)
함수의 작업 실행을 위해 추가적인 정보가 필요한 경우, 매개변수를 지정함  매개변수는 함수 내에서 변수와 동일하게 동작함 

매개변수(parameter,인자)  vs 인수(argument)

매개변수는 함수 내에서 변수와 동일하게 메모리 공간을 확보하며 함수에 전달한 인수는 매개변수에 할당된다. 만약 인수를 전달하지 않으면
매개변수는 undefined로 초기화 된다.

ex

const foo = function(p1,p2) {
  console.log(p1,p2);

};

foo(1); //1 undefined

call-by-value 

원시 타입 인수는 Call-by-value(값에 의한 호출)로 동작한다.  이는 함수 호출 시 원시 타입 인수를 함수에 매개변수로 전달할 때 매개변수에 값을
복사하여 함수로 전달하는 방식이다. 이떄 함수 내에서 매개변수를 통해 값이 변경되어도 전달이 완료된 원시 타입 값은 변경되지 않는다.

ex)

function foo(primitive) {
  primitive += 1;
  return primitive;

}

console.log(foo(x)); // 1
console.log(x);  // 0

call-by-reference 같은경우는 저장됨 










